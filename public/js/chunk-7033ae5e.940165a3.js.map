{"version":3,"sources":["webpack:///./src/models/UserModel.ts","webpack:///./src/models/AccountModel.ts","webpack:///./src/models/SchoolModel.ts","webpack:///./src/models/ClassModel.ts","webpack:///./src/models/TeacherModel.ts","webpack:///./src/models/StudentModel.ts","webpack:///./src/models/TextbookModel.ts","webpack:///./src/models/QuizModel.ts","webpack:///./src/models/HomeworkModel.ts","webpack:///./src/models/RollcallModel.ts","webpack:///./src/models/VideoModel.ts","webpack:///./src/models/CommonModel.ts","webpack:///./src/models/InstructionsModel.ts","webpack:///./src/constant/ErrorCode.ts","webpack:///./src/network/pb/proto.js"],"names":["UserModel","sInstance","get","Promise","sendAPI","then","response","data","catch","error","getByID","id","add","item","errNo","NotResponse","err_no","edit","delete","addByPB","User","decode","Uint8Array","instance","AccountModel","refreshCodeImg","getImageSrcByPost","src","verificationCodeCheck","ERR_CODE","userLogin","getIdentitySchool","getList","del","teUserLogin","teForgetPwd","stUserLogin","stGetAllCity","stGetRegion","accountModel","SchoolModel","schoolModel","ClassModel","getTeacher","getAddStudentList","addStudent","getStudentListData","delStudent","teGetList","teGet","teGetStudentList","stGetList","classModel","TeacherModel","uploadFile","editPwd","teEdit","teEditPwd","teacherModel","StudentModel","exportListData","path","filepath","teEditNote","stEdit","stGet","stEditPwd","studentModel","TextbookModel","textbookModel","QuizModel","addQuestion","getQuestionList","getQuestion","editQuestion","delQuestion","getClass","getClassTeacher","addPaper","getPaperList","delPaper","checkPaper","getPaper","editPaper","getPaperInfo","getLearningResultList","getResultList","exportList","getResult","verify","teGetAllTeacher","teGetQuestionList","teAddQuestion","teDelQuestion","tGetQuestion","teEditQuestion","teAddPaper","teGetPaperList","teCheckPaper","teDelPaper","teGetPaper","teEditPaper","teGetPaperInfo","teGetResultList","teGetResult","teGetLearningList","teVerify","stGetPaperList","checkWrite","stGetPaperQuestion","stEditAnswer","stCompleteQuiz","stGetResultMemData","stGetResultList","stGetLearningList","quizModel","HomeworkModel","getAudioList","teGetQuestion","stGetResultMem","stUploadAudio","homeworkModel","RollcallModel","editRecord","teAdd","teDel","teEditRecord","rollcallModel","VideoModel","videoModel","CommonModel","getGrade","getLevel","getUnit","getAllCity","getRegion","getSchoolCity","getSchool","getCity","teGetGrade","teGetLevel","teGetTeacher","getTECity","getTESchool","getTEClass","commonModel","InstructionsModel","instructionsModel","ErrorCode","ErrorMessage","Success","Failed","DataEmpty","InvalidVerificationCode","PicError","PicSizeError","UserNotExist","UserLoginInvalid","UserAccountDisable","UserAccountExist","SchoolExist","SchoolCanNotDel","QuestionAlreadyUse","ClassExist","ClassCanNotDel","ServerError","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","pb","properties","keys","Object","i","length","this","prototype","Long","fromBits","account","password","name","role","create","encode","message","writer","hasOwnProperty","call","uint32","int64","string","encodeDelimited","ldelim","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","isInteger","low","high","isString","fromObject","object","fromValue","unsigned","parseInt","LongBits","toNumber","String","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","module","exports"],"mappings":"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","file":"js/chunk-7033ae5e.940165a3.js","sourcesContent":["import { Network } from \"@/network\";\r\nimport { pb } from \"@/network/pb/proto\";\r\nimport { Log } from \"@/util\";\r\nimport * as Constant from \"@/constant\";\r\n\r\nclass UserModel {\r\n  private static sInstance: UserModel;\r\n\r\n  public static get instance(): UserModel {\r\n    if (!UserModel.sInstance) {\r\n      UserModel.sInstance = new UserModel();\r\n    }\r\n\r\n    return UserModel.sInstance;\r\n  }\r\n\r\n  public async get(): Promise<object> {\r\n    let data!: object;\r\n\r\n    await Network.sendAPI(\"/api/test/user\", \"get\")\r\n      .then(response => {\r\n        data = response.data as object;\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return data;\r\n  }\r\n\r\n  public async getByID(id: number): Promise<object> {\r\n    let data!: object;\r\n\r\n    await Network.sendAPI(\"/api/test/user/\" + id, \"get\")\r\n      .then(response => {\r\n        data = response.data as object;\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return data;\r\n  }\r\n\r\n  public async add(item: object): Promise<number> {\r\n    let errNo = Constant.ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/test/user\", \"post\", item)\r\n      .then(response => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.err_no as number;\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n\r\n  public async edit(id: number, item: object): Promise<number> {\r\n    let errNo = Constant.ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/test/user/\" + id, \"put\", item)\r\n      .then(response => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.err_no as number;\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n\r\n  public async delete(id: number): Promise<number> {\r\n    let errNo = Constant.ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/test/user/\" + id, \"delete\")\r\n      .then(response => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.err_no as number;\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n\r\n  public async addByPB(item: Uint8Array): Promise<number> {\r\n    const errNo = Constant.ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/test/pb\", \"post\", item)\r\n      .then(response => {\r\n        pb.User.decode(new Uint8Array(response.data as ArrayBufferLike));\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n}\r\n\r\nconst userModel = UserModel.instance;\r\n\r\nexport { userModel as UserModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass AccountModel {\r\n  private static sInstance: AccountModel;\r\n\r\n  public static get instance(): AccountModel {\r\n    if (!AccountModel.sInstance) {\r\n      AccountModel.sInstance = new AccountModel();\r\n    }\r\n\r\n    return AccountModel.sInstance;\r\n  }\r\n\r\n  public async refreshCodeImg(item: object): Promise<string> {\r\n    let data!: string;\r\n    await Network.getImageSrcByPost(\"/api/admin/captcha/getCode\", item) //post 取驗證碼圖，路徑要正確\r\n      .then((src) => {\r\n        data = src;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n\r\n  public async verificationCodeCheck(item: object): Promise<number> {\r\n    let errNo = ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/admin/captcha/checkCode\", \"post\", item)\r\n      .then((response) => {\r\n        const data = response.data as { [key: string]: unknown }; //把回傳回來的map，值型態先設定為“未知”\r\n        errNo = data.ERR_CODE as number; //再指定其該有的型態給他\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n\r\n  public async userLogin(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/admin/index/check\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as { [key: string]: unknown };\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n\r\n  // 新增帳號\r\n  public async add(item: object): Promise<number> {\r\n    let errNo = ErrorCode.NotResponse;\r\n    await Network.sendAPI(\"/api/admin/account/add\", \"post\", item)\r\n      .then((response) => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.ERR_CODE as number;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return errNo;\r\n  }\r\n\r\n  //取得 該身份&縣市下的分校\r\n  public async getIdentitySchool(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/admin/account/getIdentitySchool\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as { [key: string]: unknown };\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n\r\n  //取得帳號列表\r\n  public async getList(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/admin/account/getList\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as { [key: string]: unknown };\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n\r\n  // 刪除 帳號\r\n  public async del(item: object): Promise<number> {\r\n    let errNo = ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/admin/account/del\", \"post\", item)\r\n      .then((response) => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.ERR_CODE as number;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n\r\n  //取得 帳號資訊\r\n  public async get(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/admin/account/getMem\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as object;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n\r\n  // 編輯帳號\r\n  public async edit(item: object): Promise<number> {\r\n    let errNo = ErrorCode.NotResponse;\r\n\r\n    await Network.sendAPI(\"/api/admin/account/edit\", \"post\", item)\r\n      .then((response) => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.ERR_CODE as number;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return errNo;\r\n  }\r\n\r\n  /* ------------------------ 老師前台 ------------------------ */\r\n  //驗證登入\r\n  public async teUserLogin(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/ap/teacher/index/check\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as { [key: string]: unknown };\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return data;\r\n  }\r\n\r\n  //忘記密碼 寄信\r\n  public async teForgetPwd(item: object): Promise<number> {\r\n    let errNo = ErrorCode.NotResponse;\r\n    await Network.sendAPI(\"/api/ap/teacher/index/forgetPwd\", \"post\", item)\r\n      .then((response) => {\r\n        const data = response.data as { [key: string]: unknown };\r\n        errNo = data.ERR_CODE as number;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return errNo;\r\n  }\r\n\r\n  /* ------------------------ 學生前台 ------------------------ */\r\n  //驗證登入\r\n  public async stUserLogin(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/ap/student/index/check\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as { [key: string]: unknown };\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n\r\n    return data;\r\n  }\r\n\r\n  // 取得所有縣市列表\r\n  public async stGetAllCity(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/ap/student/student/getAllCity\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as object;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n\r\n  // 取得該縣市的鄉鎮市區列表\r\n  public async stGetRegion(item: object): Promise<object> {\r\n    let data!: object;\r\n    await Network.sendAPI(\"/api/ap/student/student/getRegion\", \"post\", item)\r\n      .then((response) => {\r\n        data = response.data as object;\r\n      })\r\n      .catch((error) => {\r\n        Log.error(error);\r\n      });\r\n    return data;\r\n  }\r\n}\r\n\r\nconst accountModel = AccountModel.instance;\r\n\r\nexport { accountModel as AccountModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass SchoolModel {\r\n    private static sInstance: SchoolModel;\r\n\r\n    public static get instance(): SchoolModel {\r\n        if (!SchoolModel.sInstance) {\r\n            SchoolModel.sInstance = new SchoolModel();\r\n        }\r\n\r\n        return SchoolModel.sInstance;\r\n    }\r\n\r\n    // 新增分校 \r\n    public async add(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/school/add\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得分校列表\r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/school/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 分校資訊\r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/school/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯分校 \r\n    public async edit(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/school/edit\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除 分校\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/school/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n}\r\n\r\nconst schoolModel = SchoolModel.instance;\r\n\r\nexport { schoolModel as SchoolModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass ClassModel {\r\n    private static sInstance: ClassModel;\r\n\r\n    public static get instance(): ClassModel {\r\n        if (!ClassModel.sInstance) {\r\n            ClassModel.sInstance = new ClassModel();\r\n        }\r\n\r\n        return ClassModel.sInstance;\r\n    }\r\n\r\n    // 取得 該分校的可選老師\r\n    public async getTeacher(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/admin/classes/getTeacher\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增班級\r\n    public async add(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/classes/add\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得班級列表\r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/classes/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 班級資訊        \r\n    public async get(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/admin/classes/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯班級 \r\n    public async edit(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/classes/edit\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除班級\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/classes/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 取得可選擇的學生列表 \r\n    public async getAddStudentList(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/admin/classes/getAddStudentList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n                // this.convertAddStudentListData(rawData);\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增學生至班級\r\n    public async addStudent(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/classes/addStudent\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 取得此班級學生列表\r\n    public async getStudentListData(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/classes/getStudentList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除班級學生\r\n    public async delStudent(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/classes/delStudent\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ------------------------ */\r\n    //取得班級列表\r\n    public async teGetList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/classes/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 班級資訊        \r\n    public async teGet(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/classes/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得此班級學生列表\r\n    public async teGetStudentList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/classes/getStudentList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n\r\n    /* ------------------------ 學生前台 ------------------------ */\r\n    //取得班級列表\r\n    public async stGetList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/classes/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n}\r\n\r\nconst classModel = ClassModel.instance;\r\n\r\nexport { classModel as ClassModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass TeacherModel {\r\n    private static sInstance: TeacherModel;\r\n\r\n    public static get instance(): TeacherModel {\r\n        if (!TeacherModel.sInstance) {\r\n            TeacherModel.sInstance = new TeacherModel();\r\n        }\r\n\r\n        return TeacherModel.sInstance;\r\n    }\r\n\r\n    // 新增老師 \r\n    public async add(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/teacher/add\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 取得老師列表 \r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/teacher/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除老師\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/teacher/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得 老師資訊 + 該老師所屬分校列表 \r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/teacher/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯老師\r\n    public async edit(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/teacher/edit\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 編輯老師 密碼\r\n    public async editPwd(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/teacher/editPwd\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ---------------------- */\r\n    //取得 老師資訊\r\n    public async teGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/teacher/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯老師\r\n    public async teEdit(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/ap/teacher/teacher/edit\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 編輯老師 密碼\r\n    public async teEditPwd(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/teacher/editPwd\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n}\r\n\r\nconst teacherModel = TeacherModel.instance;\r\n\r\nexport { teacherModel as TeacherModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass StudentModel {\r\n    private static sInstance: StudentModel;\r\n\r\n    public static get instance(): StudentModel {\r\n        if (!StudentModel.sInstance) {\r\n            StudentModel.sInstance = new StudentModel();\r\n        }\r\n\r\n        return StudentModel.sInstance;\r\n    }\r\n\r\n    // 新增學生 \r\n    public async add(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/student/add\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 取得學生列表 \r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/student/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除學生\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/student/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得 學生資訊\r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/student/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯學生\r\n    public async edit(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/student/edit\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 編輯學生 密碼\r\n    public async editPwd(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/student/editPwd\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //匯出學生列表\r\n    public async exportListData(item: object): Promise<string> {\r\n        let path = '';\r\n\r\n        await Network.sendAPI(\"/api/admin/student/exportList\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                path = data.filepath as string;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return path;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ---------------------- */\r\n    //取得學生列表\r\n    public async teGetStudentList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/student/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得學生資訊\r\n    public async teGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/student/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯學生\r\n    public async teEditNote(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/student/editNote\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 學生前台 ---------------------- */\r\n    // 編輯學生\r\n    public async stEdit(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/ap/student/student/edit\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得學生資訊\r\n    public async stGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/student/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯學生 密碼\r\n    public async stEditPwd(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/student/student/editPwd\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n\r\n}\r\n\r\nconst studentModel = StudentModel.instance;\r\n\r\nexport { studentModel as StudentModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass TextbookModel {\r\n    private static sInstance: TextbookModel;\r\n\r\n    public static get instance(): TextbookModel {\r\n        if (!TextbookModel.sInstance) {\r\n            TextbookModel.sInstance = new TextbookModel();\r\n        }\r\n\r\n        return TextbookModel.sInstance;\r\n    }\r\n\r\n    // 新增教材\r\n    public async add(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/textbook/add\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得教材列表\r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/textbook/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 教材資訊\r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/textbook/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯教材 \r\n    public async edit(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/textbook/edit\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除教材\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/textbook/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ---------------------- */\r\n    //取得教材列表\r\n    public async teGetList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/textbook/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n}\r\n\r\nconst textbookModel = TextbookModel.instance;\r\n\r\nexport { textbookModel as TextbookModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass QuizModel {\r\n    private static sInstance: QuizModel;\r\n\r\n    public static get instance(): QuizModel {\r\n        if (!QuizModel.sInstance) {\r\n            QuizModel.sInstance = new QuizModel();\r\n        }\r\n\r\n        return QuizModel.sInstance;\r\n    }\r\n    // ------------------------------------ 題目 ------------------------------------\r\n    // 取得 依照登入者身分的可選老師\r\n    public async getTeacher(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getTeacher\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增題目 \r\n    public async addQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.uploadFile(\"/api/admin/quiz/addQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得題目列表\r\n    public async getQuestionList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getQuestionList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 題目資訊\r\n    public async getQuestion(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getQuestionMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯題目 \r\n    public async editQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/admin/quiz/editQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除題目\r\n    public async delQuestion(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/quiz/delQuestion\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // ------------------------------------ 組卷 ------------------------------------\r\n    // 取得 該分校的班級列表\r\n    public async getClass(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getClass\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得 該班級的老師列表\r\n    public async getClassTeacher(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getClassTeacher\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增組卷\r\n    public async addPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/quiz/addPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得組卷列表\r\n    public async getPaperList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getPaperList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除組卷\r\n    public async delPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/quiz/delPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 檢查該組卷是否已填寫\r\n    public async checkPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/quiz/checkPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 取得組卷資訊        \r\n    public async getPaper(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getPaperMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯組卷 \r\n    public async editPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/quiz/editPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得試卷資訊\r\n    public async getPaperInfo(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getPaperInfo\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得測驗結果列表 \r\n    public async getLearningResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/student/getLearningList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    public async getResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getResultList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //匯出測驗結果列表\r\n    public async exportList(item: object): Promise<string> {\r\n        let path = '';\r\n        await Network.sendAPI(\"/api/admin/quiz/exportList\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                path = data.filepath as string;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return path;\r\n    }\r\n\r\n    // 撈測驗結果\r\n    public async getResult(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/quiz/getResultMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 審核\r\n    public async verify(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/quiz/verify\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ------------------------ */\r\n    // 列出可選老師\r\n    public async teGetAllTeacher(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getAllTeacher\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得題目列表\r\n    public async teGetQuestionList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getQuestionList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增題目 \r\n    public async teAddQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/ap/teacher/quiz/addQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除題目\r\n    public async teDelQuestion(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/delQuestion\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得 題目資訊\r\n    public async tGetQuestion(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getQuestionMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯題目 \r\n    public async teEditQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/ap/teacher/quiz/editQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 新增組卷\r\n    public async teAddPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/addPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 取得組卷列表\r\n    public async teGetPaperList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getPaperList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 檢查該組卷是否已填寫\r\n    public async teCheckPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/checkPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除組卷\r\n    public async teDelPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/delPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 取得組卷資訊        \r\n    public async teGetPaper(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getPaperMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯組卷 \r\n    public async teEditPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/editPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得試卷＋題目列表\r\n    public async teGetPaperInfo(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getPaperInfo\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得測驗結果列表        \r\n    public async teGetResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getResultList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 撈測驗結果\r\n    public async teGetResult(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getResultMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    public async teGetLearningList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/student/getLearningList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 審核\r\n    public async teVerify(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/verify\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 學生前台 ------------------------ */\r\n    //取得組卷列表\r\n    public async stGetPaperList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/getPaperList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 檢查該組卷該學生是否已填寫過，並撈出題目或題數\r\n    public async checkWrite(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/checkWrite\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    public async stGetPaperQuestion(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/getPaperQuestion\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯答案\r\n    public async stEditAnswer(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/editAnswer\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 編輯最後一題答案，完成測驗\r\n    public async stCompleteQuiz(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/completeQuiz\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 撈測驗結果\r\n    public async stGetResultMemData(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/getResultMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得測驗結果列表 \r\n    public async stGetResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/quiz/getResultList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    public async stGetLearningList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/learning/getLearningList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\nconst quizModel = QuizModel.instance;\r\n\r\nexport { quizModel as QuizModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass HomeworkModel {\r\n    private static sInstance: HomeworkModel;\r\n\r\n    public static get instance(): HomeworkModel {\r\n        if (!HomeworkModel.sInstance) {\r\n            HomeworkModel.sInstance = new HomeworkModel();\r\n        }\r\n\r\n        return HomeworkModel.sInstance;\r\n    }\r\n    // ------------------------------------ 題目 ------------------------------------\r\n    // 新增題目 \r\n    public async addQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/admin/homework/addQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得題目列表\r\n    public async getQuestionList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getQuestionList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 題目資訊\r\n    public async getQuestion(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getQuestionMem\" , \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯題目 \r\n    public async editQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/admin/homework/editQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除題目\r\n    public async delQuestion(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/homework/delQuestion\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // ------------------------------------ 組卷 ------------------------------------\r\n    // 新增組卷\r\n    public async addPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/homework/addPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得組卷列表\r\n    public async getPaperList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getPaperList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除組卷\r\n    public async delPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/homework/delPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 檢查該組卷是否已填寫\r\n    public async checkPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/homework/checkPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 取得組卷資訊\r\n    public async getPaper(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getPaperMem\" , \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得試卷資訊＋題目列表\r\n    public async getPaperInfo(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getPaperInfo\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得結果列表 \r\n    public async getResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getResultList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //匯出測驗結果列表\r\n    public async exportList(item: object): Promise<string> {\r\n        let path = '';\r\n        await Network.sendAPI(\"/api/admin/homework/exportList\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                path = data.filepath as string;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return path;\r\n    }\r\n\r\n    // 撈測驗結果\r\n    public async getResult(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getResultMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 老師評語\r\n    public async verify(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/homework/verify\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得音檔列表 \r\n    public async getAudioList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/homework/getAudioList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ------------------------ */\r\n    //取得題目列表\r\n    public async teGetQuestionList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getQuestionList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增題目 \r\n    public async teAddQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/ap/teacher/homework/addQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得 題目資訊\r\n    public async teGetQuestion(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getQuestionMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯題目 \r\n    public async teEditQuestion(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/ap/teacher/homework/editQuestion\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除題目\r\n    public async teDelQuestion(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/delQuestion\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    // 新增組卷\r\n    public async teAddPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/addPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得組卷列表\r\n    public async teGetPaperList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getPaperList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除組卷\r\n    public async teDelPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/delPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 檢查該組卷是否已填寫\r\n    public async teCheckPaper(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/checkPaper\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 取得組卷資訊\r\n    public async teGetPaper(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getPaperMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得題目列表\r\n    public async teGetPaperInfo(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getPaperInfo\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n\r\n    //取得測驗結果列表        \r\n    public async teGetResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getResultList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 撈測驗結果\r\n    public async teGetResult(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/getResultMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 老師評語\r\n    public async teVerify(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/homework/verify\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 學生前台 ------------------------ */\r\n    //取得組卷列表\r\n    public async stGetPaperList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/homework/getPaperList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 檢查該組卷該學生是否已填寫過，並撈出題目或題數\r\n    public async checkWrite(item: object): Promise<object> {\r\n        let data !: object\r\n        await Network.sendAPI(\"/api/ap/student/homework/checkWrite\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    public async stGetPaperQuestion(item: object): Promise<object> {\r\n        let data !: object\r\n        await Network.sendAPI(\"/api/ap/student/homework/getPaperQuestion\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯答案\r\n    public async stEditAnswer(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/student/homework/editAnswer\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得結果列表 \r\n    public async stGetResultList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/homework/getResultList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 撈測驗結果\r\n    public async stGetResultMem(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/homework/getResultMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 上傳音檔\r\n    public async stUploadAudio(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/ap/student/homework/uploadAudio\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n}\r\n\r\nconst homeworkModel = HomeworkModel.instance;\r\n\r\nexport { homeworkModel as HomeworkModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass RollcallModel {\r\n    private static sInstance: RollcallModel;\r\n\r\n    public static get instance(): RollcallModel {\r\n        if (!RollcallModel.sInstance) {\r\n            RollcallModel.sInstance = new RollcallModel();\r\n        }\r\n\r\n        return RollcallModel.sInstance;\r\n    }\r\n\r\n    // 新增點名表 \r\n    public async add(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/rollcall/add\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 取得點名表列表 \r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/rollcall/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除點名表\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/admin/rollcall/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得 點名表資訊        \r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/rollcall/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯點名表紀錄\r\n    public async editRecord(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/rollcall/editRecord\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 老師前台 ------------------------ */\r\n    //取得點名列表\r\n    public async teGetList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/rollcall/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 新增點名表 \r\n    public async teAdd(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/rollcall/add\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    // 刪除點名表\r\n    public async teDel(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/rollcall/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    //取得 點名表資訊        \r\n    public async teGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/rollcall/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯點名表紀錄\r\n    public async teEditRecord(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.sendAPI(\"/api/ap/teacher/rollcall/editRecord\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 學生前台 ------------------------ */\r\n    //取得點名列表\r\n    public async stGetList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/rollcall/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n}\r\n\r\nconst rollcallModel = RollcallModel.instance;\r\n\r\nexport { rollcallModel as RollcallModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass VideoModel {\r\n    private static sInstance: VideoModel;\r\n\r\n    public static get instance(): VideoModel {\r\n        if (!VideoModel.sInstance) {\r\n            VideoModel.sInstance = new VideoModel();\r\n        }\r\n\r\n        return VideoModel.sInstance;\r\n    }\r\n\r\n    // 新增\r\n    public async add(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/video/add\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得列表\r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/video/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 刪除\r\n    public async del(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/video/del\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    //取得 資訊\r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/video/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯\r\n    public async edit(item: object): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n\r\n        await Network.sendAPI(\"/api/admin/video/edit\", \"post\", item)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n\r\n        return errNo;\r\n    }\r\n\r\n    /* ------------------------ 學生前台 ---------------------- */\r\n    //取得列表\r\n    public async stGetList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/video/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 資訊\r\n    public async stGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/video/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\nconst videoModel = VideoModel.instance;\r\n\r\nexport { videoModel as VideoModel };\r\n","import { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass CommonModel {\r\n    private static sInstance: CommonModel;\r\n\r\n    public static get instance(): CommonModel {\r\n        if (!CommonModel.sInstance) {\r\n            CommonModel.sInstance = new CommonModel();\r\n        }\r\n\r\n        return CommonModel.sInstance;\r\n    }\r\n\r\n    //取得級數\r\n    public async getGrade(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/textbook/getGrade\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得該級數下的等級\r\n    public async getLevel(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/textbook/getLevel\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得該等級下的單元\r\n    public async getUnit(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/textbook/getUnit\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得所有縣市列表 \r\n    public async getAllCity(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/school/getAllCity\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得該縣市的鄉鎮市區列表\r\n    public async getRegion(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/school/getRegion\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得有分校之縣市\r\n    public async getSchoolCity(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/admin/school/getSchoolCity\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得該縣市的分校列表 \r\n    public async getSchool(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/admin/school/getSchool\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 權限為分校之該分校縣市\r\n    public async getCity(item: object): Promise<object> {\r\n        let data!: object;\r\n        await Network.sendAPI(\"/api/admin/school/getCity\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    /* -------------------------- 老師前台 ----------------------- */\r\n    //取得級數\r\n    public async teGetGrade(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getGrade\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得該級數下的等級\r\n    public async teGetLevel(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getLevel\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 取得 該班級的老師列表\r\n    public async teGetTeacher(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/quiz/getClassTeacher\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得該老師所屬班級的所有縣市\r\n    public async getTECity(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/teacher/getTECity\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得該老師所屬班級之該縣市所屬分校\r\n    public async getTESchool(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/teacher/getTESchool\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得該老師所屬班級之該分校的班級列表\r\n    public async getTEClass(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/teacher/getTEClass\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n}\r\n\r\nconst commonModel = CommonModel.instance;\r\n\r\nexport { commonModel as CommonModel };\r\n","import { ErrorCode } from \"@/constant\";\r\nimport { Network } from \"@/network\";\r\nimport { Log } from \"@/util\";\r\n\r\nclass InstructionsModel {\r\n    private static sInstance: InstructionsModel;\r\n\r\n    public static get instance(): InstructionsModel {\r\n        if (!InstructionsModel.sInstance) {\r\n            InstructionsModel.sInstance = new InstructionsModel();\r\n        }\r\n\r\n        return InstructionsModel.sInstance;\r\n    }\r\n\r\n    //取得列表\r\n    public async getList(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/instructions/getList\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as { [key: string]: unknown };\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    //取得 資訊\r\n    public async get(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/admin/instructions/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    // 編輯\r\n    public async edit(data: FormData): Promise<number> {\r\n        let errNo = ErrorCode.NotResponse;\r\n        await Network.uploadFile(\"/api/admin/instructions/edit\", data)\r\n            .then(response => {\r\n                const data = response.data as { [key: string]: unknown };\r\n                errNo = data.ERR_CODE as number;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return errNo;\r\n    }\r\n    /* ------------------------ 老師前台 ---------------------- */\r\n    //取得 資訊\r\n    public async teGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/teacher/instructions/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n    /* ------------------------ 學生前台 ---------------------- */\r\n    //取得 資訊\r\n    public async stGet(item: object): Promise<object> {\r\n        let data !: object;\r\n        await Network.sendAPI(\"/api/ap/student/instructions/getMem\", \"post\", item)\r\n            .then(response => {\r\n                data = response.data as object;\r\n            })\r\n            .catch(error => {\r\n                Log.error(error);\r\n            });\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\nconst instructionsModel = InstructionsModel.instance;\r\n\r\nexport { instructionsModel as InstructionsModel };\r\n","// define used error code\r\nexport enum ErrorCode {\r\n    NotResponse = -1,\r\n\r\n    // status\r\n    Success = 1,\r\n    Failed = 2,\r\n    DataEmpty = 3,\r\n    InvalidVerificationCode = 4,\r\n    PicError = 5,\r\n    PicSizeError = 6,\r\n    InvalidToken = 7,\r\n\r\n    // account\r\n    UserNotExist = 1001,\r\n    UserLoginInvalid = 1002,\r\n    UserAccountDisable = 1003,\r\n    UserAccountExist = 1004,\r\n  \r\n    // school\r\n    SchoolExist = 2001,\r\n    SchoolCanNotDel = 2002,\r\n\r\n    // quiz\r\n    QuestionAlreadyUse = 3001,\r\n\r\n    // class\r\n    ClassExist = 4001,\r\n    ClassCanNotDel = 4002,\r\n\r\n    ServerError = 10000\r\n}\r\n\r\n// define used error message (lang key)\r\nexport const ErrorMessage: { [key: number]: string } = { //指定型態\r\n  [ErrorCode.Success]: \"成功\",\r\n  [ErrorCode.Failed]: \"失敗\",\r\n  [ErrorCode.DataEmpty]: \"資料不存在\",\r\n  [ErrorCode.InvalidVerificationCode]: \"驗證碼錯誤\",\r\n  [ErrorCode.PicError]: \"圖片上傳錯誤\",\r\n  [ErrorCode.PicSizeError]: \"請符合建議尺寸\",\r\n\r\n  [ErrorCode.UserNotExist]: \"帳號不存在\",\r\n  [ErrorCode.UserLoginInvalid]: \"帳號或密碼錯誤\",\r\n  [ErrorCode.UserAccountDisable]: \"帳號已停用\",\r\n  [ErrorCode.UserAccountExist]: \"帳號已存在\",\r\n\r\n  [ErrorCode.SchoolExist]: \"此名稱已存在\",\r\n  [ErrorCode.SchoolCanNotDel]: \"此分校已有關聯資料，無法刪除\",\r\n\r\n  [ErrorCode.QuestionAlreadyUse]: \"此題目已被組卷，無法刪除\",\r\n\r\n  [ErrorCode.ClassExist]: \"此班級已存在\",\r\n  [ErrorCode.ClassCanNotDel]: \"此班級已有關聯資料，無法刪除\",\r\n\r\n  [ErrorCode.ServerError]: \"server_error\"\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\r\n\"use strict\";\r\n\r\nvar $protobuf = require(\"protobufjs/minimal\");\r\n\r\n// Common aliases\r\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\r\n\r\n// Exported root namespace\r\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\r\n\r\n$root.pb = (function() {\r\n\r\n    /**\r\n     * Namespace pb.\r\n     * @exports pb\r\n     * @namespace\r\n     */\r\n    var pb = {};\r\n\r\n    pb.User = (function() {\r\n\r\n        /**\r\n         * Properties of a User.\r\n         * @memberof pb\r\n         * @interface IUser\r\n         * @property {number|Long|null} [id] User id\r\n         * @property {string|null} [account] User account\r\n         * @property {string|null} [password] User password\r\n         * @property {string|null} [name] User name\r\n         * @property {string|null} [role] User role\r\n         */\r\n\r\n        /**\r\n         * Constructs a new User.\r\n         * @memberof pb\r\n         * @classdesc Represents a User.\r\n         * @implements IUser\r\n         * @constructor\r\n         * @param {pb.IUser=} [properties] Properties to set\r\n         */\r\n        function User(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * User id.\r\n         * @member {number|Long} id\r\n         * @memberof pb.User\r\n         * @instance\r\n         */\r\n        User.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * User account.\r\n         * @member {string} account\r\n         * @memberof pb.User\r\n         * @instance\r\n         */\r\n        User.prototype.account = \"\";\r\n\r\n        /**\r\n         * User password.\r\n         * @member {string} password\r\n         * @memberof pb.User\r\n         * @instance\r\n         */\r\n        User.prototype.password = \"\";\r\n\r\n        /**\r\n         * User name.\r\n         * @member {string} name\r\n         * @memberof pb.User\r\n         * @instance\r\n         */\r\n        User.prototype.name = \"\";\r\n\r\n        /**\r\n         * User role.\r\n         * @member {string} role\r\n         * @memberof pb.User\r\n         * @instance\r\n         */\r\n        User.prototype.role = \"\";\r\n\r\n        /**\r\n         * Creates a new User instance using the specified properties.\r\n         * @function create\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {pb.IUser=} [properties] Properties to set\r\n         * @returns {pb.User} User instance\r\n         */\r\n        User.create = function create(properties) {\r\n            return new User(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified User message. Does not implicitly {@link pb.User.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {pb.IUser} message User message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        User.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);\r\n            if (message.account != null && Object.hasOwnProperty.call(message, \"account\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.account);\r\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.password);\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);\r\n            if (message.role != null && Object.hasOwnProperty.call(message, \"role\"))\r\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.role);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified User message, length delimited. Does not implicitly {@link pb.User.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {pb.IUser} message User message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        User.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a User message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {pb.User} User\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        User.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.User();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1:\r\n                    message.id = reader.int64();\r\n                    break;\r\n                case 2:\r\n                    message.account = reader.string();\r\n                    break;\r\n                case 3:\r\n                    message.password = reader.string();\r\n                    break;\r\n                case 4:\r\n                    message.name = reader.string();\r\n                    break;\r\n                case 5:\r\n                    message.role = reader.string();\r\n                    break;\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a User message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {pb.User} User\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        User.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a User message.\r\n         * @function verify\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        User.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))\r\n                    return \"id: integer|Long expected\";\r\n            if (message.account != null && message.hasOwnProperty(\"account\"))\r\n                if (!$util.isString(message.account))\r\n                    return \"account: string expected\";\r\n            if (message.password != null && message.hasOwnProperty(\"password\"))\r\n                if (!$util.isString(message.password))\r\n                    return \"password: string expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.role != null && message.hasOwnProperty(\"role\"))\r\n                if (!$util.isString(message.role))\r\n                    return \"role: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a User message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {pb.User} User\r\n         */\r\n        User.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.pb.User)\r\n                return object;\r\n            var message = new $root.pb.User();\r\n            if (object.id != null)\r\n                if ($util.Long)\r\n                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;\r\n                else if (typeof object.id === \"string\")\r\n                    message.id = parseInt(object.id, 10);\r\n                else if (typeof object.id === \"number\")\r\n                    message.id = object.id;\r\n                else if (typeof object.id === \"object\")\r\n                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\r\n            if (object.account != null)\r\n                message.account = String(object.account);\r\n            if (object.password != null)\r\n                message.password = String(object.password);\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.role != null)\r\n                message.role = String(object.role);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a User message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof pb.User\r\n         * @static\r\n         * @param {pb.User} message User\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        User.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.id = options.longs === String ? \"0\" : 0;\r\n                object.account = \"\";\r\n                object.password = \"\";\r\n                object.name = \"\";\r\n                object.role = \"\";\r\n            }\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                if (typeof message.id === \"number\")\r\n                    object.id = options.longs === String ? String(message.id) : message.id;\r\n                else\r\n                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\r\n            if (message.account != null && message.hasOwnProperty(\"account\"))\r\n                object.account = message.account;\r\n            if (message.password != null && message.hasOwnProperty(\"password\"))\r\n                object.password = message.password;\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.role != null && message.hasOwnProperty(\"role\"))\r\n                object.role = message.role;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this User to JSON.\r\n         * @function toJSON\r\n         * @memberof pb.User\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        User.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        return User;\r\n    })();\r\n\r\n    return pb;\r\n})();\r\n\r\nmodule.exports = $root;\r\n"],"sourceRoot":""}